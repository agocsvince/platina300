{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar addStateFromUrl = function addStateFromUrl(url) {\n  var perCounter = 0;\n  var path = '';\n\n  var _iterator = _createForOfIteratorHelper(url),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var char = _step.value;\n\n      if (perCounter === 2) {\n        path += char;\n      }\n\n      if (char === '/') {\n        perCounter++;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return path;\n};\n\nexport default addStateFromUrl;","map":{"version":3,"sources":["/Users/vinceagocs/Documents/GitHub/platina300/src/components/UrlReader.js"],"names":["addStateFromUrl","url","perCounter","path","char"],"mappings":";;;;;;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAS;AAC7B,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,IAAI,GAAG,EAAX;;AAF6B,6CAGZF,GAHY;AAAA;;AAAA;AAG7B,wDAAsB;AAAA,UAAbG,IAAa;;AAClB,UAAIF,UAAU,KAAK,CAAnB,EAAsB;AAClBC,QAAAA,IAAI,IAAIC,IAAR;AACH;;AACD,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACdF,QAAAA,UAAU;AACb;AAEJ;AAX4B;AAAA;AAAA;AAAA;AAAA;;AAY7B,SAAOC,IAAP;AACH,CAbD;;AAeA,eAAeH,eAAf","sourcesContent":["\nconst addStateFromUrl = (url) => {\n    let perCounter = 0;\n    let path = ''\n    for (let char of url) {\n        if (perCounter === 2) {\n            path += char\n        }\n        if (char === '/') {\n            perCounter++;\n        }\n        \n    }\n    return path\n}\n\nexport default addStateFromUrl;"]},"metadata":{},"sourceType":"module"}