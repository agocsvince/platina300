{"ast":null,"code":"var exec = require('child_process').execFile; //get child_process module\n\n\nvar fs = require('fs');\n\nvar enwebp = require('./cwebp.js'); //get cwebp module(converts other image format to webp)\n\n\nvar dewebp = require('./dwebp.js'); //get dwebp module(converts webp format to other image)\n\n\nvar gifwebp = require('./gwebp.js'); //get gif2webp module(convert git image to webp)\n\n\nvar webpmux = require('./webpmux.js'); //get webpmux module(convert non animated webp images to animated webp)\n\n\nvar buffer_utils = require('./buffer_utils.js'); //get buffer utilities \n//permission issue in Linux and macOS\n\n\nmodule.exports.grant_permission = function () {\n  var arr = [enwebp(), dewebp(), gifwebp(), webpmux()];\n  arr.forEach(function (exe_path) {\n    fs.chmodSync(exe_path, 493);\n  });\n}; //convert base64 to webp base64\n\n\nmodule.exports.str2webpstr = function (base64str, image_type, option, extra_path) {\n  // base64str of image\n  // base64str image type jpg,png ...\n  //option: options and quality,it should be given between 0 to 100\n  return buffer_utils.base64str2webp(base64str, image_type, option, extra_path).then(function (val) {\n    return val;\n  });\n}; //convert buffer to webp buffer\n\n\nmodule.exports.buffer2webpbuffer = function (buffer, image_type, option, extra_path) {\n  // buffer of image\n  // buffer image type jpg,png ...\n  //option: options and quality,it should be given between 0 to 100\n  return buffer_utils.buffer2webp(buffer, image_type, option, extra_path).then(function (val) {\n    return val;\n  });\n}; //now convert image to .webp format \n\n\nmodule.exports.cwebp = function (input_image, output_image, option) {\n  var logging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-quiet';\n  // input_image: input image(.jpeg, .pnp ....)\n  //output_image: output image .webp \n  //option: options and quality,it should be given between 0 to 100\n  var query = \"\".concat(option, \" \\\"\").concat(input_image, \"\\\" -o \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //command to convert image \n  //enwebp() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(enwebp(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n};\n/******************************************************* dwebp *****************************************************/\n//now convert .webp to other image format \n\n\nmodule.exports.dwebp = function (input_image, output_image, option) {\n  var logging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-quiet';\n  // input_image: input image .webp\n  //output_image: output image(.jpeg, .pnp ....)\n  //option: options and quality,it should be given between 0 to 100\n  var query = \"\\\"\".concat(input_image, \"\\\" \").concat(option, \" \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //command to convert image  \n  //dewebp() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(dewebp(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n};\n/******************************************************* gif2webp *****************************************************/\n//now convert .gif image to .webp format \n\n\nmodule.exports.gwebp = function (input_image, output_image, option) {\n  var logging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-quiet';\n  // input_image: input image(.jpeg, .pnp ....)\n  //output_image: /output image .webp \n  //option: options and quality,it should be given between 0 to 100\n  var query = \"\".concat(option, \" \\\"\").concat(input_image, \"\\\" -o \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //command to convert image\n  //gifwebp() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(gifwebp(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n};\n/******************************************************* webpmux *****************************************************/\n//%%%%%%%%%%% Add ICC profile,XMP metadata and EXIF metadata\n\n\nmodule.exports.webpmux_add = function (input_image, output_image, icc_profile, option) {\n  var logging = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '-quiet';\n  // input_image: input image(.webp)\n  //output_image: output image .webp  \n  //icc_profile: icc profile\n  //option: get or set option (icc,xmp,exif)\n  var query = \"-set \".concat(option, \" \").concat(icc_profile, \" \\\"\").concat(input_image, \"\\\" -o \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //webpmux() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(webpmux(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}; //%%%%%%%%%%%%% Extract ICC profile,XMP metadata and EXIF metadata\n\n\nmodule.exports.webpmux_extract = function (input_image, icc_profile, option) {\n  var logging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-quiet';\n  // input_image: input image(.webp) \n  //icc_profile: icc profile\n  var query = \"-get \".concat(option, \" \\\"\").concat(input_image, \"\\\" -o \").concat(icc_profile, \" \\\"\").concat(logging, \"\\\"\"); //webpmux() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(webpmux(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}; //%%%%%%%% Strip ICC profile,XMP metadata and EXIF metadata \n\n\nmodule.exports.webpmux_strip = function (input_image, output_image, option) {\n  var logging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-quiet';\n  // input_image: input image(.webp) \n  //output_image: output image .webp\n  var query = \"-strip \".concat(option, \" \\\"\").concat(input_image, \"\\\" -o \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //webpmux() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(webpmux(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}; //%%%%%%%%%%% Create an animated WebP file from Webp images \n\n\nmodule.exports.webpmux_animate = function (input_images, output_image, loop, bgcolor) {\n  var logging = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '-quiet';\n  // input_images: array of image(.webp) \n  //output_image: animatedimage .webp\n  //loop:Loop the frames n number of times\n  //bgcolor: Background color of the canvas\n  var files = \"-frame \".concat(input_images[0][\"path\"], \" \").concat(input_images[0][\"offset\"]);\n  var j = input_images.length;\n\n  for (i = 1; i < j; i++) {\n    files = \"\".concat(files, \" -frame \\\"\").concat(input_images[i][\"path\"], \"\\\" \").concat(input_images[i][\"offset\"]);\n  }\n\n  var query = \"\".concat(files, \" -loop \").concat(loop, \" -bgcolor \").concat(bgcolor, \" -o \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //webpmux() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(webpmux(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}; //%%%%%%%%%%%% Get the a frame from an animated WebP file\n\n\nmodule.exports.webpmux_getframe = function (input_image, output_image, frame_number) {\n  var logging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-quiet';\n  // input_image: input image(.webp) \n  //output_image: output image .webp\n  //frame_number: frame number\n  var query = \"-get frame \".concat(frame_number, \" \\\"\").concat(input_image, \"\\\" -o \\\"\").concat(output_image, \"\\\" \\\"\").concat(logging, \"\\\"\"); //webpmux() return which platform webp library should be used for conversion\n\n  return new Promise(function (resolve, reject) {\n    //execute command \n    exec(\"\\\"\".concat(webpmux(), \"\\\"\"), query.split(/\\s+/), {\n      shell: true\n    }, function (error, stdout, stderr) {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}