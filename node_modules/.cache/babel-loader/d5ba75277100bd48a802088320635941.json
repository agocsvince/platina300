{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useCallback, useMemo } from 'react';\n\nvar UrlImageDownloader = function UrlImageDownloader(_a) {\n  var _b = _a.disableCache,\n      disableCache = _b === void 0 ? true : _b,\n      _c = _a.buttonText,\n      buttonText = _c === void 0 ? 'Download' : _c,\n      _d = _a.imageUrl,\n      imageUrl = _d === void 0 ? '' : _d;\n  var onButtonClick = useCallback(function (e) {\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n\n    if (!imageUrl.length) {\n      console.log('Please add an image url');\n      return;\n    }\n\n    var fetchUrl = \"\" + e.target.href + (disableCache ? \"?dummy=\" + Math.floor(Date.now()) : '');\n    fetch(fetchUrl, {\n      method: 'GET',\n      headers: {}\n    }).then(function (response) {\n      response.arrayBuffer().then(function (buffer) {\n        var url = window.URL.createObjectURL(new Blob([buffer]));\n        var link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', imageUrl.substr(imageUrl.lastIndexOf('/') + 1));\n        document.body.appendChild(link);\n        link.click();\n      });\n    }).catch(function (error) {\n      console.log(error);\n      return error;\n    });\n  }, [disableCache]);\n  return useMemo(function () {\n    return _jsx(React.StrictMode, {\n      children: _jsxs(\"div\", __assign({\n        className: \"container\"\n      }, {\n        children: [_jsx(\"img\", {\n          src: imageUrl,\n          alt: \"area\",\n          style: {\n            width: '100%',\n            border: '0',\n            margin: '0'\n          }\n        }, void 0), _jsx(\"a\", __assign({\n          href: imageUrl,\n          download: true,\n          onClick: function onClick(e) {\n            return onButtonClick(e);\n          }\n        }, {\n          children: buttonText\n        }), void 0)]\n      }), void 0)\n    }, void 0);\n  }, [imageUrl, buttonText]);\n};\n\nexport default UrlImageDownloader;","map":null,"metadata":{},"sourceType":"module"}