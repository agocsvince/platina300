var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useCallback, useMemo } from 'react';
var UrlImageDownloader = function (_a) {
    var _b = _a.disableCache, disableCache = _b === void 0 ? true : _b, _c = _a.buttonText, buttonText = _c === void 0 ? 'Download' : _c, _d = _a.imageUrl, imageUrl = _d === void 0 ? '' : _d;
    var onButtonClick = useCallback(function (e) {
        if (e.preventDefault) {
            e.preventDefault();
        }
        if (!imageUrl.length) {
            console.log('Please add an image url');
            return;
        }
        var fetchUrl = "" + e.target.href + (disableCache ? "?dummy=" + Math.floor(Date.now()) : '');
        fetch(fetchUrl, {
            method: 'GET',
            headers: {}
        })
            .then(function (response) {
            response.arrayBuffer().then(function (buffer) {
                var url = window.URL.createObjectURL(new Blob([buffer]));
                var link = document.createElement('a');
                link.href = url;
                link.setAttribute('download', imageUrl.substr(imageUrl.lastIndexOf('/') + 1));
                document.body.appendChild(link);
                link.click();
            });
        })
            .catch(function (error) {
            console.log(error);
            return error;
        });
    }, [disableCache]);
    return useMemo(function () { return (_jsx(React.StrictMode, { children: _jsxs("div", __assign({ className: "container" }, { children: [_jsx("img", { src: imageUrl, alt: "area", style: { width: '100%', border: '0', margin: '0' } }, void 0), _jsx("a", __assign({ href: imageUrl, download: true, onClick: function (e) { return onButtonClick(e); } }, { children: buttonText }), void 0)] }), void 0) }, void 0)); }, [imageUrl, buttonText]);
};
export default UrlImageDownloader;
//# sourceMappingURL=index.js.map